//--------------------------------------------------------------------------------
// Auto-generated by LiteX (b9a1fec30) on 2025-01-16 20:58:07
//--------------------------------------------------------------------------------
#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */
#ifndef CSR_BASE
#define CSR_BASE 0x82000000L
#endif

/* ctrl */
#define CSR_CTRL_BASE (CSR_BASE + 0x0L)
#define CSR_CTRL_RESET_ADDR (CSR_BASE + 0x0L)
#define CSR_CTRL_RESET_SIZE 1
static inline uint32_t ctrl_reset_read(void) {
	return csr_read_simple((CSR_BASE + 0x0L));
}
static inline void ctrl_reset_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x0L));
}
#define CSR_CTRL_RESET_SOC_RST_OFFSET 0
#define CSR_CTRL_RESET_SOC_RST_SIZE 1
static inline uint32_t ctrl_reset_soc_rst_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ctrl_reset_soc_rst_read(void) {
	uint32_t word = ctrl_reset_read();
	return ctrl_reset_soc_rst_extract(word);
}
static inline uint32_t ctrl_reset_soc_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ctrl_reset_soc_rst_write(uint32_t plain_value) {
	uint32_t oldword = ctrl_reset_read();
	uint32_t newword = ctrl_reset_soc_rst_replace(oldword, plain_value);
	ctrl_reset_write(newword);
}
#define CSR_CTRL_RESET_CPU_RST_OFFSET 1
#define CSR_CTRL_RESET_CPU_RST_SIZE 1
static inline uint32_t ctrl_reset_cpu_rst_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ctrl_reset_cpu_rst_read(void) {
	uint32_t word = ctrl_reset_read();
	return ctrl_reset_cpu_rst_extract(word);
}
static inline uint32_t ctrl_reset_cpu_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void ctrl_reset_cpu_rst_write(uint32_t plain_value) {
	uint32_t oldword = ctrl_reset_read();
	uint32_t newword = ctrl_reset_cpu_rst_replace(oldword, plain_value);
	ctrl_reset_write(newword);
}
#define CSR_CTRL_SCRATCH_ADDR (CSR_BASE + 0x4L)
#define CSR_CTRL_SCRATCH_SIZE 1
static inline uint32_t ctrl_scratch_read(void) {
	return csr_read_simple((CSR_BASE + 0x4L));
}
static inline void ctrl_scratch_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4L));
}
#define CSR_CTRL_BUS_ERRORS_ADDR (CSR_BASE + 0x8L)
#define CSR_CTRL_BUS_ERRORS_SIZE 1
static inline uint32_t ctrl_bus_errors_read(void) {
	return csr_read_simple((CSR_BASE + 0x8L));
}

/* ddrphy */
#define CSR_DDRPHY_BASE (CSR_BASE + 0x800L)
#define CSR_DDRPHY_RST_ADDR (CSR_BASE + 0x800L)
#define CSR_DDRPHY_RST_SIZE 1
static inline uint32_t ddrphy_rst_read(void) {
	return csr_read_simple((CSR_BASE + 0x800L));
}
static inline void ddrphy_rst_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x800L));
}
#define CSR_DDRPHY_DLY_SEL_ADDR (CSR_BASE + 0x804L)
#define CSR_DDRPHY_DLY_SEL_SIZE 1
static inline uint32_t ddrphy_dly_sel_read(void) {
	return csr_read_simple((CSR_BASE + 0x804L));
}
static inline void ddrphy_dly_sel_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x804L));
}
#define CSR_DDRPHY_HALF_SYS8X_TAPS_ADDR (CSR_BASE + 0x808L)
#define CSR_DDRPHY_HALF_SYS8X_TAPS_SIZE 1
static inline uint32_t ddrphy_half_sys8x_taps_read(void) {
	return csr_read_simple((CSR_BASE + 0x808L));
}
static inline void ddrphy_half_sys8x_taps_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x808L));
}
#define CSR_DDRPHY_WLEVEL_EN_ADDR (CSR_BASE + 0x80cL)
#define CSR_DDRPHY_WLEVEL_EN_SIZE 1
static inline uint32_t ddrphy_wlevel_en_read(void) {
	return csr_read_simple((CSR_BASE + 0x80cL));
}
static inline void ddrphy_wlevel_en_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x80cL));
}
#define CSR_DDRPHY_WLEVEL_STROBE_ADDR (CSR_BASE + 0x810L)
#define CSR_DDRPHY_WLEVEL_STROBE_SIZE 1
static inline uint32_t ddrphy_wlevel_strobe_read(void) {
	return csr_read_simple((CSR_BASE + 0x810L));
}
static inline void ddrphy_wlevel_strobe_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x810L));
}
#define CSR_DDRPHY_RDLY_DQ_RST_ADDR (CSR_BASE + 0x814L)
#define CSR_DDRPHY_RDLY_DQ_RST_SIZE 1
static inline uint32_t ddrphy_rdly_dq_rst_read(void) {
	return csr_read_simple((CSR_BASE + 0x814L));
}
static inline void ddrphy_rdly_dq_rst_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x814L));
}
#define CSR_DDRPHY_RDLY_DQ_INC_ADDR (CSR_BASE + 0x818L)
#define CSR_DDRPHY_RDLY_DQ_INC_SIZE 1
static inline uint32_t ddrphy_rdly_dq_inc_read(void) {
	return csr_read_simple((CSR_BASE + 0x818L));
}
static inline void ddrphy_rdly_dq_inc_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x818L));
}
#define CSR_DDRPHY_RDLY_DQ_BITSLIP_RST_ADDR (CSR_BASE + 0x81cL)
#define CSR_DDRPHY_RDLY_DQ_BITSLIP_RST_SIZE 1
static inline uint32_t ddrphy_rdly_dq_bitslip_rst_read(void) {
	return csr_read_simple((CSR_BASE + 0x81cL));
}
static inline void ddrphy_rdly_dq_bitslip_rst_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x81cL));
}
#define CSR_DDRPHY_RDLY_DQ_BITSLIP_ADDR (CSR_BASE + 0x820L)
#define CSR_DDRPHY_RDLY_DQ_BITSLIP_SIZE 1
static inline uint32_t ddrphy_rdly_dq_bitslip_read(void) {
	return csr_read_simple((CSR_BASE + 0x820L));
}
static inline void ddrphy_rdly_dq_bitslip_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x820L));
}
#define CSR_DDRPHY_WDLY_DQ_BITSLIP_RST_ADDR (CSR_BASE + 0x824L)
#define CSR_DDRPHY_WDLY_DQ_BITSLIP_RST_SIZE 1
static inline uint32_t ddrphy_wdly_dq_bitslip_rst_read(void) {
	return csr_read_simple((CSR_BASE + 0x824L));
}
static inline void ddrphy_wdly_dq_bitslip_rst_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x824L));
}
#define CSR_DDRPHY_WDLY_DQ_BITSLIP_ADDR (CSR_BASE + 0x828L)
#define CSR_DDRPHY_WDLY_DQ_BITSLIP_SIZE 1
static inline uint32_t ddrphy_wdly_dq_bitslip_read(void) {
	return csr_read_simple((CSR_BASE + 0x828L));
}
static inline void ddrphy_wdly_dq_bitslip_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x828L));
}
#define CSR_DDRPHY_RDPHASE_ADDR (CSR_BASE + 0x82cL)
#define CSR_DDRPHY_RDPHASE_SIZE 1
static inline uint32_t ddrphy_rdphase_read(void) {
	return csr_read_simple((CSR_BASE + 0x82cL));
}
static inline void ddrphy_rdphase_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x82cL));
}
#define CSR_DDRPHY_WRPHASE_ADDR (CSR_BASE + 0x830L)
#define CSR_DDRPHY_WRPHASE_SIZE 1
static inline uint32_t ddrphy_wrphase_read(void) {
	return csr_read_simple((CSR_BASE + 0x830L));
}
static inline void ddrphy_wrphase_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x830L));
}

/* identifier_mem */
#define CSR_IDENTIFIER_MEM_BASE (CSR_BASE + 0x1000L)

/* leds */
#define CSR_LEDS_BASE (CSR_BASE + 0x1800L)
#define CSR_LEDS_OUT_ADDR (CSR_BASE + 0x1800L)
#define CSR_LEDS_OUT_SIZE 1
static inline uint32_t leds_out_read(void) {
	return csr_read_simple((CSR_BASE + 0x1800L));
}
static inline void leds_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1800L));
}

/* sdram */
#define CSR_SDRAM_BASE (CSR_BASE + 0x2000L)
#define CSR_SDRAM_DFII_CONTROL_ADDR (CSR_BASE + 0x2000L)
#define CSR_SDRAM_DFII_CONTROL_SIZE 1
static inline uint32_t sdram_dfii_control_read(void) {
	return csr_read_simple((CSR_BASE + 0x2000L));
}
static inline void sdram_dfii_control_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2000L));
}
#define CSR_SDRAM_DFII_CONTROL_SEL_OFFSET 0
#define CSR_SDRAM_DFII_CONTROL_SEL_SIZE 1
static inline uint32_t sdram_dfii_control_sel_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdram_dfii_control_sel_read(void) {
	uint32_t word = sdram_dfii_control_read();
	return sdram_dfii_control_sel_extract(word);
}
static inline uint32_t sdram_dfii_control_sel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdram_dfii_control_sel_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_control_read();
	uint32_t newword = sdram_dfii_control_sel_replace(oldword, plain_value);
	sdram_dfii_control_write(newword);
}
#define CSR_SDRAM_DFII_CONTROL_CKE_OFFSET 1
#define CSR_SDRAM_DFII_CONTROL_CKE_SIZE 1
static inline uint32_t sdram_dfii_control_cke_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdram_dfii_control_cke_read(void) {
	uint32_t word = sdram_dfii_control_read();
	return sdram_dfii_control_cke_extract(word);
}
static inline uint32_t sdram_dfii_control_cke_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void sdram_dfii_control_cke_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_control_read();
	uint32_t newword = sdram_dfii_control_cke_replace(oldword, plain_value);
	sdram_dfii_control_write(newword);
}
#define CSR_SDRAM_DFII_CONTROL_ODT_OFFSET 2
#define CSR_SDRAM_DFII_CONTROL_ODT_SIZE 1
static inline uint32_t sdram_dfii_control_odt_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdram_dfii_control_odt_read(void) {
	uint32_t word = sdram_dfii_control_read();
	return sdram_dfii_control_odt_extract(word);
}
static inline uint32_t sdram_dfii_control_odt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void sdram_dfii_control_odt_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_control_read();
	uint32_t newword = sdram_dfii_control_odt_replace(oldword, plain_value);
	sdram_dfii_control_write(newword);
}
#define CSR_SDRAM_DFII_CONTROL_RESET_N_OFFSET 3
#define CSR_SDRAM_DFII_CONTROL_RESET_N_SIZE 1
static inline uint32_t sdram_dfii_control_reset_n_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdram_dfii_control_reset_n_read(void) {
	uint32_t word = sdram_dfii_control_read();
	return sdram_dfii_control_reset_n_extract(word);
}
static inline uint32_t sdram_dfii_control_reset_n_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void sdram_dfii_control_reset_n_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_control_read();
	uint32_t newword = sdram_dfii_control_reset_n_replace(oldword, plain_value);
	sdram_dfii_control_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_ADDR (CSR_BASE + 0x2004L)
#define CSR_SDRAM_DFII_PI0_COMMAND_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_read(void) {
	return csr_read_simple((CSR_BASE + 0x2004L));
}
static inline void sdram_dfii_pi0_command_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2004L));
}
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_OFFSET 0
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_cs_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_cs_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_cs_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_cs_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdram_dfii_pi0_command_cs_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_cs_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_WE_OFFSET 1
#define CSR_SDRAM_DFII_PI0_COMMAND_WE_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_we_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_we_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_we_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_we_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void sdram_dfii_pi0_command_we_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_we_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_CAS_OFFSET 2
#define CSR_SDRAM_DFII_PI0_COMMAND_CAS_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_cas_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_cas_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_cas_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_cas_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void sdram_dfii_pi0_command_cas_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_cas_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_RAS_OFFSET 3
#define CSR_SDRAM_DFII_PI0_COMMAND_RAS_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_ras_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_ras_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_ras_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_ras_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void sdram_dfii_pi0_command_ras_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_ras_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_WREN_OFFSET 4
#define CSR_SDRAM_DFII_PI0_COMMAND_WREN_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_wren_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 4) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_wren_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_wren_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_wren_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void sdram_dfii_pi0_command_wren_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_wren_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_RDEN_OFFSET 5
#define CSR_SDRAM_DFII_PI0_COMMAND_RDEN_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_rden_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 5) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_rden_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_rden_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_rden_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void sdram_dfii_pi0_command_rden_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_rden_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_ADDR (CSR_BASE + 0x2008L)
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_issue_read(void) {
	return csr_read_simple((CSR_BASE + 0x2008L));
}
static inline void sdram_dfii_pi0_command_issue_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2008L));
}
#define CSR_SDRAM_DFII_PI0_ADDRESS_ADDR (CSR_BASE + 0x200cL)
#define CSR_SDRAM_DFII_PI0_ADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi0_address_read(void) {
	return csr_read_simple((CSR_BASE + 0x200cL));
}
static inline void sdram_dfii_pi0_address_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x200cL));
}
#define CSR_SDRAM_DFII_PI0_BADDRESS_ADDR (CSR_BASE + 0x2010L)
#define CSR_SDRAM_DFII_PI0_BADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi0_baddress_read(void) {
	return csr_read_simple((CSR_BASE + 0x2010L));
}
static inline void sdram_dfii_pi0_baddress_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2010L));
}
#define CSR_SDRAM_DFII_PI0_WRDATA_ADDR (CSR_BASE + 0x2014L)
#define CSR_SDRAM_DFII_PI0_WRDATA_SIZE 1
static inline uint32_t sdram_dfii_pi0_wrdata_read(void) {
	return csr_read_simple((CSR_BASE + 0x2014L));
}
static inline void sdram_dfii_pi0_wrdata_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2014L));
}
#define CSR_SDRAM_DFII_PI0_RDDATA_ADDR (CSR_BASE + 0x2018L)
#define CSR_SDRAM_DFII_PI0_RDDATA_SIZE 1
static inline uint32_t sdram_dfii_pi0_rddata_read(void) {
	return csr_read_simple((CSR_BASE + 0x2018L));
}
#define CSR_SDRAM_DFII_PI1_COMMAND_ADDR (CSR_BASE + 0x201cL)
#define CSR_SDRAM_DFII_PI1_COMMAND_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_read(void) {
	return csr_read_simple((CSR_BASE + 0x201cL));
}
static inline void sdram_dfii_pi1_command_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x201cL));
}
#define CSR_SDRAM_DFII_PI1_COMMAND_CS_OFFSET 0
#define CSR_SDRAM_DFII_PI1_COMMAND_CS_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_cs_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdram_dfii_pi1_command_cs_read(void) {
	uint32_t word = sdram_dfii_pi1_command_read();
	return sdram_dfii_pi1_command_cs_extract(word);
}
static inline uint32_t sdram_dfii_pi1_command_cs_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdram_dfii_pi1_command_cs_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi1_command_read();
	uint32_t newword = sdram_dfii_pi1_command_cs_replace(oldword, plain_value);
	sdram_dfii_pi1_command_write(newword);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_WE_OFFSET 1
#define CSR_SDRAM_DFII_PI1_COMMAND_WE_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_we_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdram_dfii_pi1_command_we_read(void) {
	uint32_t word = sdram_dfii_pi1_command_read();
	return sdram_dfii_pi1_command_we_extract(word);
}
static inline uint32_t sdram_dfii_pi1_command_we_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void sdram_dfii_pi1_command_we_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi1_command_read();
	uint32_t newword = sdram_dfii_pi1_command_we_replace(oldword, plain_value);
	sdram_dfii_pi1_command_write(newword);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_CAS_OFFSET 2
#define CSR_SDRAM_DFII_PI1_COMMAND_CAS_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_cas_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdram_dfii_pi1_command_cas_read(void) {
	uint32_t word = sdram_dfii_pi1_command_read();
	return sdram_dfii_pi1_command_cas_extract(word);
}
static inline uint32_t sdram_dfii_pi1_command_cas_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void sdram_dfii_pi1_command_cas_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi1_command_read();
	uint32_t newword = sdram_dfii_pi1_command_cas_replace(oldword, plain_value);
	sdram_dfii_pi1_command_write(newword);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_RAS_OFFSET 3
#define CSR_SDRAM_DFII_PI1_COMMAND_RAS_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_ras_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdram_dfii_pi1_command_ras_read(void) {
	uint32_t word = sdram_dfii_pi1_command_read();
	return sdram_dfii_pi1_command_ras_extract(word);
}
static inline uint32_t sdram_dfii_pi1_command_ras_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void sdram_dfii_pi1_command_ras_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi1_command_read();
	uint32_t newword = sdram_dfii_pi1_command_ras_replace(oldword, plain_value);
	sdram_dfii_pi1_command_write(newword);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_WREN_OFFSET 4
#define CSR_SDRAM_DFII_PI1_COMMAND_WREN_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_wren_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 4) & mask );
}
static inline uint32_t sdram_dfii_pi1_command_wren_read(void) {
	uint32_t word = sdram_dfii_pi1_command_read();
	return sdram_dfii_pi1_command_wren_extract(word);
}
static inline uint32_t sdram_dfii_pi1_command_wren_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void sdram_dfii_pi1_command_wren_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi1_command_read();
	uint32_t newword = sdram_dfii_pi1_command_wren_replace(oldword, plain_value);
	sdram_dfii_pi1_command_write(newword);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_RDEN_OFFSET 5
#define CSR_SDRAM_DFII_PI1_COMMAND_RDEN_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_rden_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 5) & mask );
}
static inline uint32_t sdram_dfii_pi1_command_rden_read(void) {
	uint32_t word = sdram_dfii_pi1_command_read();
	return sdram_dfii_pi1_command_rden_extract(word);
}
static inline uint32_t sdram_dfii_pi1_command_rden_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void sdram_dfii_pi1_command_rden_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi1_command_read();
	uint32_t newword = sdram_dfii_pi1_command_rden_replace(oldword, plain_value);
	sdram_dfii_pi1_command_write(newword);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_ISSUE_ADDR (CSR_BASE + 0x2020L)
#define CSR_SDRAM_DFII_PI1_COMMAND_ISSUE_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_issue_read(void) {
	return csr_read_simple((CSR_BASE + 0x2020L));
}
static inline void sdram_dfii_pi1_command_issue_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2020L));
}
#define CSR_SDRAM_DFII_PI1_ADDRESS_ADDR (CSR_BASE + 0x2024L)
#define CSR_SDRAM_DFII_PI1_ADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi1_address_read(void) {
	return csr_read_simple((CSR_BASE + 0x2024L));
}
static inline void sdram_dfii_pi1_address_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2024L));
}
#define CSR_SDRAM_DFII_PI1_BADDRESS_ADDR (CSR_BASE + 0x2028L)
#define CSR_SDRAM_DFII_PI1_BADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi1_baddress_read(void) {
	return csr_read_simple((CSR_BASE + 0x2028L));
}
static inline void sdram_dfii_pi1_baddress_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2028L));
}
#define CSR_SDRAM_DFII_PI1_WRDATA_ADDR (CSR_BASE + 0x202cL)
#define CSR_SDRAM_DFII_PI1_WRDATA_SIZE 1
static inline uint32_t sdram_dfii_pi1_wrdata_read(void) {
	return csr_read_simple((CSR_BASE + 0x202cL));
}
static inline void sdram_dfii_pi1_wrdata_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x202cL));
}
#define CSR_SDRAM_DFII_PI1_RDDATA_ADDR (CSR_BASE + 0x2030L)
#define CSR_SDRAM_DFII_PI1_RDDATA_SIZE 1
static inline uint32_t sdram_dfii_pi1_rddata_read(void) {
	return csr_read_simple((CSR_BASE + 0x2030L));
}
#define CSR_SDRAM_DFII_PI2_COMMAND_ADDR (CSR_BASE + 0x2034L)
#define CSR_SDRAM_DFII_PI2_COMMAND_SIZE 1
static inline uint32_t sdram_dfii_pi2_command_read(void) {
	return csr_read_simple((CSR_BASE + 0x2034L));
}
static inline void sdram_dfii_pi2_command_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2034L));
}
#define CSR_SDRAM_DFII_PI2_COMMAND_CS_OFFSET 0
#define CSR_SDRAM_DFII_PI2_COMMAND_CS_SIZE 1
static inline uint32_t sdram_dfii_pi2_command_cs_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdram_dfii_pi2_command_cs_read(void) {
	uint32_t word = sdram_dfii_pi2_command_read();
	return sdram_dfii_pi2_command_cs_extract(word);
}
static inline uint32_t sdram_dfii_pi2_command_cs_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdram_dfii_pi2_command_cs_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi2_command_read();
	uint32_t newword = sdram_dfii_pi2_command_cs_replace(oldword, plain_value);
	sdram_dfii_pi2_command_write(newword);
}
#define CSR_SDRAM_DFII_PI2_COMMAND_WE_OFFSET 1
#define CSR_SDRAM_DFII_PI2_COMMAND_WE_SIZE 1
static inline uint32_t sdram_dfii_pi2_command_we_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdram_dfii_pi2_command_we_read(void) {
	uint32_t word = sdram_dfii_pi2_command_read();
	return sdram_dfii_pi2_command_we_extract(word);
}
static inline uint32_t sdram_dfii_pi2_command_we_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void sdram_dfii_pi2_command_we_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi2_command_read();
	uint32_t newword = sdram_dfii_pi2_command_we_replace(oldword, plain_value);
	sdram_dfii_pi2_command_write(newword);
}
#define CSR_SDRAM_DFII_PI2_COMMAND_CAS_OFFSET 2
#define CSR_SDRAM_DFII_PI2_COMMAND_CAS_SIZE 1
static inline uint32_t sdram_dfii_pi2_command_cas_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdram_dfii_pi2_command_cas_read(void) {
	uint32_t word = sdram_dfii_pi2_command_read();
	return sdram_dfii_pi2_command_cas_extract(word);
}
static inline uint32_t sdram_dfii_pi2_command_cas_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void sdram_dfii_pi2_command_cas_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi2_command_read();
	uint32_t newword = sdram_dfii_pi2_command_cas_replace(oldword, plain_value);
	sdram_dfii_pi2_command_write(newword);
}
#define CSR_SDRAM_DFII_PI2_COMMAND_RAS_OFFSET 3
#define CSR_SDRAM_DFII_PI2_COMMAND_RAS_SIZE 1
static inline uint32_t sdram_dfii_pi2_command_ras_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdram_dfii_pi2_command_ras_read(void) {
	uint32_t word = sdram_dfii_pi2_command_read();
	return sdram_dfii_pi2_command_ras_extract(word);
}
static inline uint32_t sdram_dfii_pi2_command_ras_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void sdram_dfii_pi2_command_ras_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi2_command_read();
	uint32_t newword = sdram_dfii_pi2_command_ras_replace(oldword, plain_value);
	sdram_dfii_pi2_command_write(newword);
}
#define CSR_SDRAM_DFII_PI2_COMMAND_WREN_OFFSET 4
#define CSR_SDRAM_DFII_PI2_COMMAND_WREN_SIZE 1
static inline uint32_t sdram_dfii_pi2_command_wren_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 4) & mask );
}
static inline uint32_t sdram_dfii_pi2_command_wren_read(void) {
	uint32_t word = sdram_dfii_pi2_command_read();
	return sdram_dfii_pi2_command_wren_extract(word);
}
static inline uint32_t sdram_dfii_pi2_command_wren_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void sdram_dfii_pi2_command_wren_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi2_command_read();
	uint32_t newword = sdram_dfii_pi2_command_wren_replace(oldword, plain_value);
	sdram_dfii_pi2_command_write(newword);
}
#define CSR_SDRAM_DFII_PI2_COMMAND_RDEN_OFFSET 5
#define CSR_SDRAM_DFII_PI2_COMMAND_RDEN_SIZE 1
static inline uint32_t sdram_dfii_pi2_command_rden_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 5) & mask );
}
static inline uint32_t sdram_dfii_pi2_command_rden_read(void) {
	uint32_t word = sdram_dfii_pi2_command_read();
	return sdram_dfii_pi2_command_rden_extract(word);
}
static inline uint32_t sdram_dfii_pi2_command_rden_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void sdram_dfii_pi2_command_rden_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi2_command_read();
	uint32_t newword = sdram_dfii_pi2_command_rden_replace(oldword, plain_value);
	sdram_dfii_pi2_command_write(newword);
}
#define CSR_SDRAM_DFII_PI2_COMMAND_ISSUE_ADDR (CSR_BASE + 0x2038L)
#define CSR_SDRAM_DFII_PI2_COMMAND_ISSUE_SIZE 1
static inline uint32_t sdram_dfii_pi2_command_issue_read(void) {
	return csr_read_simple((CSR_BASE + 0x2038L));
}
static inline void sdram_dfii_pi2_command_issue_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2038L));
}
#define CSR_SDRAM_DFII_PI2_ADDRESS_ADDR (CSR_BASE + 0x203cL)
#define CSR_SDRAM_DFII_PI2_ADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi2_address_read(void) {
	return csr_read_simple((CSR_BASE + 0x203cL));
}
static inline void sdram_dfii_pi2_address_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x203cL));
}
#define CSR_SDRAM_DFII_PI2_BADDRESS_ADDR (CSR_BASE + 0x2040L)
#define CSR_SDRAM_DFII_PI2_BADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi2_baddress_read(void) {
	return csr_read_simple((CSR_BASE + 0x2040L));
}
static inline void sdram_dfii_pi2_baddress_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2040L));
}
#define CSR_SDRAM_DFII_PI2_WRDATA_ADDR (CSR_BASE + 0x2044L)
#define CSR_SDRAM_DFII_PI2_WRDATA_SIZE 1
static inline uint32_t sdram_dfii_pi2_wrdata_read(void) {
	return csr_read_simple((CSR_BASE + 0x2044L));
}
static inline void sdram_dfii_pi2_wrdata_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2044L));
}
#define CSR_SDRAM_DFII_PI2_RDDATA_ADDR (CSR_BASE + 0x2048L)
#define CSR_SDRAM_DFII_PI2_RDDATA_SIZE 1
static inline uint32_t sdram_dfii_pi2_rddata_read(void) {
	return csr_read_simple((CSR_BASE + 0x2048L));
}
#define CSR_SDRAM_DFII_PI3_COMMAND_ADDR (CSR_BASE + 0x204cL)
#define CSR_SDRAM_DFII_PI3_COMMAND_SIZE 1
static inline uint32_t sdram_dfii_pi3_command_read(void) {
	return csr_read_simple((CSR_BASE + 0x204cL));
}
static inline void sdram_dfii_pi3_command_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x204cL));
}
#define CSR_SDRAM_DFII_PI3_COMMAND_CS_OFFSET 0
#define CSR_SDRAM_DFII_PI3_COMMAND_CS_SIZE 1
static inline uint32_t sdram_dfii_pi3_command_cs_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdram_dfii_pi3_command_cs_read(void) {
	uint32_t word = sdram_dfii_pi3_command_read();
	return sdram_dfii_pi3_command_cs_extract(word);
}
static inline uint32_t sdram_dfii_pi3_command_cs_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdram_dfii_pi3_command_cs_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi3_command_read();
	uint32_t newword = sdram_dfii_pi3_command_cs_replace(oldword, plain_value);
	sdram_dfii_pi3_command_write(newword);
}
#define CSR_SDRAM_DFII_PI3_COMMAND_WE_OFFSET 1
#define CSR_SDRAM_DFII_PI3_COMMAND_WE_SIZE 1
static inline uint32_t sdram_dfii_pi3_command_we_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdram_dfii_pi3_command_we_read(void) {
	uint32_t word = sdram_dfii_pi3_command_read();
	return sdram_dfii_pi3_command_we_extract(word);
}
static inline uint32_t sdram_dfii_pi3_command_we_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void sdram_dfii_pi3_command_we_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi3_command_read();
	uint32_t newword = sdram_dfii_pi3_command_we_replace(oldword, plain_value);
	sdram_dfii_pi3_command_write(newword);
}
#define CSR_SDRAM_DFII_PI3_COMMAND_CAS_OFFSET 2
#define CSR_SDRAM_DFII_PI3_COMMAND_CAS_SIZE 1
static inline uint32_t sdram_dfii_pi3_command_cas_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdram_dfii_pi3_command_cas_read(void) {
	uint32_t word = sdram_dfii_pi3_command_read();
	return sdram_dfii_pi3_command_cas_extract(word);
}
static inline uint32_t sdram_dfii_pi3_command_cas_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void sdram_dfii_pi3_command_cas_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi3_command_read();
	uint32_t newword = sdram_dfii_pi3_command_cas_replace(oldword, plain_value);
	sdram_dfii_pi3_command_write(newword);
}
#define CSR_SDRAM_DFII_PI3_COMMAND_RAS_OFFSET 3
#define CSR_SDRAM_DFII_PI3_COMMAND_RAS_SIZE 1
static inline uint32_t sdram_dfii_pi3_command_ras_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdram_dfii_pi3_command_ras_read(void) {
	uint32_t word = sdram_dfii_pi3_command_read();
	return sdram_dfii_pi3_command_ras_extract(word);
}
static inline uint32_t sdram_dfii_pi3_command_ras_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void sdram_dfii_pi3_command_ras_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi3_command_read();
	uint32_t newword = sdram_dfii_pi3_command_ras_replace(oldword, plain_value);
	sdram_dfii_pi3_command_write(newword);
}
#define CSR_SDRAM_DFII_PI3_COMMAND_WREN_OFFSET 4
#define CSR_SDRAM_DFII_PI3_COMMAND_WREN_SIZE 1
static inline uint32_t sdram_dfii_pi3_command_wren_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 4) & mask );
}
static inline uint32_t sdram_dfii_pi3_command_wren_read(void) {
	uint32_t word = sdram_dfii_pi3_command_read();
	return sdram_dfii_pi3_command_wren_extract(word);
}
static inline uint32_t sdram_dfii_pi3_command_wren_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void sdram_dfii_pi3_command_wren_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi3_command_read();
	uint32_t newword = sdram_dfii_pi3_command_wren_replace(oldword, plain_value);
	sdram_dfii_pi3_command_write(newword);
}
#define CSR_SDRAM_DFII_PI3_COMMAND_RDEN_OFFSET 5
#define CSR_SDRAM_DFII_PI3_COMMAND_RDEN_SIZE 1
static inline uint32_t sdram_dfii_pi3_command_rden_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 5) & mask );
}
static inline uint32_t sdram_dfii_pi3_command_rden_read(void) {
	uint32_t word = sdram_dfii_pi3_command_read();
	return sdram_dfii_pi3_command_rden_extract(word);
}
static inline uint32_t sdram_dfii_pi3_command_rden_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void sdram_dfii_pi3_command_rden_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi3_command_read();
	uint32_t newword = sdram_dfii_pi3_command_rden_replace(oldword, plain_value);
	sdram_dfii_pi3_command_write(newword);
}
#define CSR_SDRAM_DFII_PI3_COMMAND_ISSUE_ADDR (CSR_BASE + 0x2050L)
#define CSR_SDRAM_DFII_PI3_COMMAND_ISSUE_SIZE 1
static inline uint32_t sdram_dfii_pi3_command_issue_read(void) {
	return csr_read_simple((CSR_BASE + 0x2050L));
}
static inline void sdram_dfii_pi3_command_issue_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2050L));
}
#define CSR_SDRAM_DFII_PI3_ADDRESS_ADDR (CSR_BASE + 0x2054L)
#define CSR_SDRAM_DFII_PI3_ADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi3_address_read(void) {
	return csr_read_simple((CSR_BASE + 0x2054L));
}
static inline void sdram_dfii_pi3_address_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2054L));
}
#define CSR_SDRAM_DFII_PI3_BADDRESS_ADDR (CSR_BASE + 0x2058L)
#define CSR_SDRAM_DFII_PI3_BADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi3_baddress_read(void) {
	return csr_read_simple((CSR_BASE + 0x2058L));
}
static inline void sdram_dfii_pi3_baddress_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2058L));
}
#define CSR_SDRAM_DFII_PI3_WRDATA_ADDR (CSR_BASE + 0x205cL)
#define CSR_SDRAM_DFII_PI3_WRDATA_SIZE 1
static inline uint32_t sdram_dfii_pi3_wrdata_read(void) {
	return csr_read_simple((CSR_BASE + 0x205cL));
}
static inline void sdram_dfii_pi3_wrdata_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x205cL));
}
#define CSR_SDRAM_DFII_PI3_RDDATA_ADDR (CSR_BASE + 0x2060L)
#define CSR_SDRAM_DFII_PI3_RDDATA_SIZE 1
static inline uint32_t sdram_dfii_pi3_rddata_read(void) {
	return csr_read_simple((CSR_BASE + 0x2060L));
}

/* timer0 */
#define CSR_TIMER0_BASE (CSR_BASE + 0x2800L)
#define CSR_TIMER0_LOAD_ADDR (CSR_BASE + 0x2800L)
#define CSR_TIMER0_LOAD_SIZE 1
static inline uint32_t timer0_load_read(void) {
	return csr_read_simple((CSR_BASE + 0x2800L));
}
static inline void timer0_load_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2800L));
}
#define CSR_TIMER0_RELOAD_ADDR (CSR_BASE + 0x2804L)
#define CSR_TIMER0_RELOAD_SIZE 1
static inline uint32_t timer0_reload_read(void) {
	return csr_read_simple((CSR_BASE + 0x2804L));
}
static inline void timer0_reload_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2804L));
}
#define CSR_TIMER0_EN_ADDR (CSR_BASE + 0x2808L)
#define CSR_TIMER0_EN_SIZE 1
static inline uint32_t timer0_en_read(void) {
	return csr_read_simple((CSR_BASE + 0x2808L));
}
static inline void timer0_en_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2808L));
}
#define CSR_TIMER0_UPDATE_VALUE_ADDR (CSR_BASE + 0x280cL)
#define CSR_TIMER0_UPDATE_VALUE_SIZE 1
static inline uint32_t timer0_update_value_read(void) {
	return csr_read_simple((CSR_BASE + 0x280cL));
}
static inline void timer0_update_value_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x280cL));
}
#define CSR_TIMER0_VALUE_ADDR (CSR_BASE + 0x2810L)
#define CSR_TIMER0_VALUE_SIZE 1
static inline uint32_t timer0_value_read(void) {
	return csr_read_simple((CSR_BASE + 0x2810L));
}
#define CSR_TIMER0_EV_STATUS_ADDR (CSR_BASE + 0x2814L)
#define CSR_TIMER0_EV_STATUS_SIZE 1
static inline uint32_t timer0_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x2814L));
}
#define CSR_TIMER0_EV_STATUS_ZERO_OFFSET 0
#define CSR_TIMER0_EV_STATUS_ZERO_SIZE 1
static inline uint32_t timer0_ev_status_zero_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t timer0_ev_status_zero_read(void) {
	uint32_t word = timer0_ev_status_read();
	return timer0_ev_status_zero_extract(word);
}
#define CSR_TIMER0_EV_PENDING_ADDR (CSR_BASE + 0x2818L)
#define CSR_TIMER0_EV_PENDING_SIZE 1
static inline uint32_t timer0_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0x2818L));
}
static inline void timer0_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2818L));
}
#define CSR_TIMER0_EV_PENDING_ZERO_OFFSET 0
#define CSR_TIMER0_EV_PENDING_ZERO_SIZE 1
static inline uint32_t timer0_ev_pending_zero_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t timer0_ev_pending_zero_read(void) {
	uint32_t word = timer0_ev_pending_read();
	return timer0_ev_pending_zero_extract(word);
}
static inline uint32_t timer0_ev_pending_zero_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void timer0_ev_pending_zero_write(uint32_t plain_value) {
	uint32_t oldword = timer0_ev_pending_read();
	uint32_t newword = timer0_ev_pending_zero_replace(oldword, plain_value);
	timer0_ev_pending_write(newword);
}
#define CSR_TIMER0_EV_ENABLE_ADDR (CSR_BASE + 0x281cL)
#define CSR_TIMER0_EV_ENABLE_SIZE 1
static inline uint32_t timer0_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x281cL));
}
static inline void timer0_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x281cL));
}
#define CSR_TIMER0_EV_ENABLE_ZERO_OFFSET 0
#define CSR_TIMER0_EV_ENABLE_ZERO_SIZE 1
static inline uint32_t timer0_ev_enable_zero_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t timer0_ev_enable_zero_read(void) {
	uint32_t word = timer0_ev_enable_read();
	return timer0_ev_enable_zero_extract(word);
}
static inline uint32_t timer0_ev_enable_zero_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void timer0_ev_enable_zero_write(uint32_t plain_value) {
	uint32_t oldword = timer0_ev_enable_read();
	uint32_t newword = timer0_ev_enable_zero_replace(oldword, plain_value);
	timer0_ev_enable_write(newword);
}

/* uart */
#define CSR_UART_BASE (CSR_BASE + 0x3000L)
#define CSR_UART_RXTX_ADDR (CSR_BASE + 0x3000L)
#define CSR_UART_RXTX_SIZE 1
static inline uint32_t uart_rxtx_read(void) {
	return csr_read_simple((CSR_BASE + 0x3000L));
}
static inline void uart_rxtx_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3000L));
}
#define CSR_UART_TXFULL_ADDR (CSR_BASE + 0x3004L)
#define CSR_UART_TXFULL_SIZE 1
static inline uint32_t uart_txfull_read(void) {
	return csr_read_simple((CSR_BASE + 0x3004L));
}
#define CSR_UART_RXEMPTY_ADDR (CSR_BASE + 0x3008L)
#define CSR_UART_RXEMPTY_SIZE 1
static inline uint32_t uart_rxempty_read(void) {
	return csr_read_simple((CSR_BASE + 0x3008L));
}
#define CSR_UART_EV_STATUS_ADDR (CSR_BASE + 0x300cL)
#define CSR_UART_EV_STATUS_SIZE 1
static inline uint32_t uart_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x300cL));
}
#define CSR_UART_EV_STATUS_TX_OFFSET 0
#define CSR_UART_EV_STATUS_TX_SIZE 1
static inline uint32_t uart_ev_status_tx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t uart_ev_status_tx_read(void) {
	uint32_t word = uart_ev_status_read();
	return uart_ev_status_tx_extract(word);
}
#define CSR_UART_EV_STATUS_RX_OFFSET 1
#define CSR_UART_EV_STATUS_RX_SIZE 1
static inline uint32_t uart_ev_status_rx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t uart_ev_status_rx_read(void) {
	uint32_t word = uart_ev_status_read();
	return uart_ev_status_rx_extract(word);
}
#define CSR_UART_EV_PENDING_ADDR (CSR_BASE + 0x3010L)
#define CSR_UART_EV_PENDING_SIZE 1
static inline uint32_t uart_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0x3010L));
}
static inline void uart_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3010L));
}
#define CSR_UART_EV_PENDING_TX_OFFSET 0
#define CSR_UART_EV_PENDING_TX_SIZE 1
static inline uint32_t uart_ev_pending_tx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t uart_ev_pending_tx_read(void) {
	uint32_t word = uart_ev_pending_read();
	return uart_ev_pending_tx_extract(word);
}
static inline uint32_t uart_ev_pending_tx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void uart_ev_pending_tx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_pending_read();
	uint32_t newword = uart_ev_pending_tx_replace(oldword, plain_value);
	uart_ev_pending_write(newword);
}
#define CSR_UART_EV_PENDING_RX_OFFSET 1
#define CSR_UART_EV_PENDING_RX_SIZE 1
static inline uint32_t uart_ev_pending_rx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t uart_ev_pending_rx_read(void) {
	uint32_t word = uart_ev_pending_read();
	return uart_ev_pending_rx_extract(word);
}
static inline uint32_t uart_ev_pending_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void uart_ev_pending_rx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_pending_read();
	uint32_t newword = uart_ev_pending_rx_replace(oldword, plain_value);
	uart_ev_pending_write(newword);
}
#define CSR_UART_EV_ENABLE_ADDR (CSR_BASE + 0x3014L)
#define CSR_UART_EV_ENABLE_SIZE 1
static inline uint32_t uart_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x3014L));
}
static inline void uart_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3014L));
}
#define CSR_UART_EV_ENABLE_TX_OFFSET 0
#define CSR_UART_EV_ENABLE_TX_SIZE 1
static inline uint32_t uart_ev_enable_tx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t uart_ev_enable_tx_read(void) {
	uint32_t word = uart_ev_enable_read();
	return uart_ev_enable_tx_extract(word);
}
static inline uint32_t uart_ev_enable_tx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void uart_ev_enable_tx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_enable_read();
	uint32_t newword = uart_ev_enable_tx_replace(oldword, plain_value);
	uart_ev_enable_write(newword);
}
#define CSR_UART_EV_ENABLE_RX_OFFSET 1
#define CSR_UART_EV_ENABLE_RX_SIZE 1
static inline uint32_t uart_ev_enable_rx_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t uart_ev_enable_rx_read(void) {
	uint32_t word = uart_ev_enable_read();
	return uart_ev_enable_rx_extract(word);
}
static inline uint32_t uart_ev_enable_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void uart_ev_enable_rx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_enable_read();
	uint32_t newword = uart_ev_enable_rx_replace(oldword, plain_value);
	uart_ev_enable_write(newword);
}
#define CSR_UART_TXEMPTY_ADDR (CSR_BASE + 0x3018L)
#define CSR_UART_TXEMPTY_SIZE 1
static inline uint32_t uart_txempty_read(void) {
	return csr_read_simple((CSR_BASE + 0x3018L));
}
#define CSR_UART_RXFULL_ADDR (CSR_BASE + 0x301cL)
#define CSR_UART_RXFULL_SIZE 1
static inline uint32_t uart_rxfull_read(void) {
	return csr_read_simple((CSR_BASE + 0x301cL));
}

#endif
